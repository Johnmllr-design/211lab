v2.0 raw
# This file holds the microprogram data that you should load into your
# datapath's Microprogram ROM. Each row holds a 16-bit value that you will
# break into control signals to execute an instruction with a given opcode.
# As you implement additional opcodes you will need to change the hexadecimal
# values below. Don't forget to add comments that describe the control signals
# each opcode is configured to send.


###############################################################
# Bit 0: Register  Write_enable                               #
# Bit 1: A inverse              ALU                           #
# Bit 2: B inverse                 ALU                        #
# Bit 3: C in                         ALU                     #
# Bit 4 - 6: ALUOp                                            #
###############################################################

# Opcode 0: add
0001            # Set Write_enable to 1 and everything else to 0 so 0x0001

# Opcode 1: sub
000D            # Set Write_enable, B_inverse and Carry_in to 1

# Opcode 2: and
0011            # Write_enable = 1, ALUOp = 001

# Opcode 3: or
0021            # Write_enable = 1, ALUOp = 010

# Opcode 4: nand
0027            # A_inv, B_inv, Write_enable = 1, ALUOp = 010 (or)

# Opcode 5: nor
0017            # A_inv, B_inv, Write_enable = 1, ALUOp = 001 (and)

# Opcode 6: xor
0031            # Write_enable = 1, ALUOp = 011

# Opcode 7: slt
0041            # Write_enable = 1, ALUOp = 100 (signed compare)

# Opcode 8: sltu
0051            # Write_enable = 1, ALUOp = 101 (unsigned compare)

# Opcode 9: lb
0000

# Opcode 10: lw
0000

# Opcode 11: sb
0000

# Opcode 12: sw
0000

# Opcode 13: beq
0000

# Opcode 14: bne
0000

# Opcode 15: j
0000